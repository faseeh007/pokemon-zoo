{"ast":null,"code":"var _jsxFileName = \"/home/faseeh/faseehWorkspace/Pokemon/pokezoo/frontend/src/features/find/SearchOutput.js\";\n\n/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\";\nimport axios from \"axios\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectorFind, storePredictions } from \"./findSlice\";\nimport { useEffect, useState, useRef } from \"react\";\nimport { selectorPokemon } from \"../explore/pokemonCardsSlice\";\nimport getTopKPredPokeObj from \"./utils/getTopKPred\";\nimport PokemonCardML from \"./components/PokemonCardML\";\n\nconst SearchOutput = () => {\n  const findState = useSelector(selectorFind);\n  const pokemonState = useSelector(selectorPokemon);\n  const imageRef = useRef(null);\n  const dispatch = useDispatch(); // const [imageRef, setImageRef] = useState(null)\n  // const onChangeRef = useCallback(node => {\n  //   setImageRef(node)\n  // }, [])\n\n  const [model, setModel] = useState(null);\n  const MODEL_HTTP_URL = \"api/pokeml/classify\";\n  const MODEL_INDEXEDDB_URL = \"indexeddb://poke-model\";\n  useEffect(() => {\n    async function fetchModel() {\n      try {\n        const localClassifierModel = await tf.loadLayersModel(MODEL_INDEXEDDB_URL);\n        setModel(localClassifierModel);\n        console.log(\"Model loaded from IndexedDB\");\n      } catch (e) {\n        try {\n          const classifierModel = await tf.loadLayersModel(MODEL_HTTP_URL);\n          setModel(classifierModel);\n          await classifierModel.save(MODEL_INDEXEDDB_URL);\n          console.log(\"Model saved to IndexedDB\");\n        } catch (e) {\n          console.log(\"Unable to load model at all: \", e);\n        }\n      }\n    }\n\n    fetchModel();\n  }, []);\n  useEffect(() => {\n    async function makePredictions() {\n      if (imageRef && model) {\n        console.log(\"Uploaded Image from inside the useEffect\", findState.uploadedImage);\n        console.log(\"ImageRef from inside the useEffect\", imageRef.current);\n\n        try {\n          const imgTensor = tf.browser.fromPixels(imageRef.current).resizeNearestNeighbor([160, 160]).toFloat().sub(127).div(127).expandDims();\n          const y_pred = await model.predict(imgTensor).data();\n          console.log(y_pred);\n          console.log(pokemonState);\n          const topkPredNames = getTopKPredPokeObj(y_pred, 6, pokemonState);\n          dispatch(storePredictions({\n            predictions: topkPredNames\n          }));\n          console.log(topkPredNames);\n          return topkPredNames;\n        } catch (e) {\n          console.log(\"Unable to run predictions.\", e);\n        }\n      }\n    }\n\n    makePredictions();\n  }, [findState.uploadedImage]);\n  return jsx(\"div\", {\n    css: {\n      \"display\": \"flex\",\n      \"flexDirection\": \"column\",\n      \"textAlign\": \"center\",\n      \"padding\": \"0.5rem\",\n      \"@media (min-width: 768px)\": {\n        \"flexDirection\": \"row\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }\n  }, jsx(\"div\", {\n    css: {\n      \"margin\": \"0.25rem\",\n      \"@media (min-width: 768px)\": {\n        \"width\": \"50%\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, jsx(\"h3\", {\n    css: {\n      \"--bg-opacity\": \"1\",\n      \"backgroundColor\": \"rgba(203, 213, 224, var(--bg-opacity))\",\n      \"marginBottom\": \"0.5rem\",\n      \"--text-opacity\": \"1\",\n      \"color\": \"rgba(26, 32, 44, var(--text-opacity))\",\n      \"fontWeight\": \"600\",\n      \"padding\": \"0.25rem\",\n      \"borderRadius\": \"0.25rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"Preview Input Image\"), jsx(\"div\", {\n    css: {\n      \"display\": \"flex\",\n      \"flexDirection\": \"row\",\n      \"justifyContent\": \"space-between\",\n      \"padding\": \"0.25rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), console.log(\"Uploaded Image from inside the useEffect\", findState.uploadedImage), console.log(\"ImageRef from inside the useEffect\", imageRef.current), findState.uploadedImage && jsx(\"img\", {\n    ref: imageRef,\n    css: {\n      \"borderWidth\": \"1px\",\n      \"--border-opacity\": \"1\",\n      \"borderColor\": \"rgba(107, 70, 193, var(--border-opacity))\",\n      \"padding\": \"0.25rem\",\n      \"borderRadius\": \"0.25rem\",\n      \"boxShadow\": \"0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)\"\n    },\n    src: findState.uploadedImage,\n    width: 600,\n    height: 600,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }))), jsx(\"div\", {\n    css: {\n      \"margin\": \"0.25rem\",\n      \"--text-opacity\": \"1\",\n      \"color\": \"rgba(0, 0, 0, var(--text-opacity))\",\n      \"@media (min-width: 768px)\": {\n        \"width\": \"50%\",\n        \"height\": \"100vh\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, jsx(\"h3\", {\n    css: {\n      \"--bg-opacity\": \"1\",\n      \"backgroundColor\": \"rgba(203, 213, 224, var(--bg-opacity))\",\n      \"marginBottom\": \"0.5rem\",\n      \"--text-opacity\": \"1\",\n      \"color\": \"rgba(26, 32, 44, var(--text-opacity))\",\n      \"fontWeight\": \"600\",\n      \"padding\": \"0.25rem\",\n      \"borderRadius\": \"0.25rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, \"Search Results (top-6 matches)\"), jsx(\"div\", {\n    css: {\n      \"display\": \"grid\",\n      \"gridTemplateColumns\": \"repeat(1, minmax(0, 1fr))\",\n      \"gap\": \"0.5rem\",\n      \"padding\": \"0.25rem\",\n      \"@media (min-width: 640px)\": {\n        \"gridTemplateColumns\": \"repeat(1, minmax(0, 1fr))\"\n      },\n      \"@media (min-width: 1024px)\": {\n        \"gridTemplateColumns\": \"repeat(2, minmax(0, 1fr))\"\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, findState.matchesFound.length === 6 && findState.matchesFound.map(poke => jsx(PokemonCardML, {\n    key: `key-${poke.id}`,\n    pokemonId: poke.id,\n    pokemonName: poke.name,\n    pokemonType: poke.type,\n    pokemonHeight: poke.height,\n    pokemonWeight: poke.weight,\n    pokemonBaseExperience: poke.baseExperience,\n    pokemonSprite: poke.sprites,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  })))));\n};\n\nexport default SearchOutput;","map":{"version":3,"sources":["/home/faseeh/faseehWorkspace/Pokemon/pokezoo/frontend/src/features/find/SearchOutput.js"],"names":["jsx","css","axios","tf","useSelector","useDispatch","selectorFind","storePredictions","useEffect","useState","useRef","selectorPokemon","getTopKPredPokeObj","PokemonCardML","SearchOutput","findState","pokemonState","imageRef","dispatch","model","setModel","MODEL_HTTP_URL","MODEL_INDEXEDDB_URL","fetchModel","localClassifierModel","loadLayersModel","console","log","e","classifierModel","save","makePredictions","uploadedImage","current","imgTensor","browser","fromPixels","resizeNearestNeighbor","toFloat","sub","div","expandDims","y_pred","predict","data","topkPredNames","predictions","matchesFound","length","map","poke","id","name","type","height","weight","baseExperience","sprites"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { jsx, css } from \"@emotion/core\"\nimport tw from \"twin.macro\"\nimport axios from \"axios\"\nimport * as tf from \"@tensorflow/tfjs\"\n\nimport { useSelector, useDispatch } from \"react-redux\"\nimport { selectorFind, storePredictions } from \"./findSlice\"\nimport { useEffect, useState, useRef } from \"react\"\nimport { selectorPokemon } from \"../explore/pokemonCardsSlice\"\n\nimport getTopKPredPokeObj from \"./utils/getTopKPred\"\nimport PokemonCardML from \"./components/PokemonCardML\"\n\nconst SearchOutput = () => {\n  const findState = useSelector(selectorFind)\n  const pokemonState = useSelector(selectorPokemon)\n\n  const imageRef = useRef(null)\n  const dispatch = useDispatch()\n  // const [imageRef, setImageRef] = useState(null)\n\n  // const onChangeRef = useCallback(node => {\n  //   setImageRef(node)\n  // }, [])\n\n  const [model, setModel] = useState(null)\n\n  const MODEL_HTTP_URL = \"api/pokeml/classify\"\n  const MODEL_INDEXEDDB_URL = \"indexeddb://poke-model\"\n\n  useEffect(() => {\n    async function fetchModel() {\n      try {\n        const localClassifierModel = await tf.loadLayersModel(\n          MODEL_INDEXEDDB_URL\n        )\n\n        setModel(localClassifierModel)\n        console.log(\"Model loaded from IndexedDB\")\n      } catch (e) {\n        try {\n          const classifierModel = await tf.loadLayersModel(MODEL_HTTP_URL)\n          setModel(classifierModel)\n\n          await classifierModel.save(MODEL_INDEXEDDB_URL)\n          console.log(\"Model saved to IndexedDB\")\n        } catch (e) {\n          console.log(\"Unable to load model at all: \", e)\n        }\n      }\n    }\n    fetchModel()\n  }, [])\n\n  useEffect(() => {\n    async function makePredictions() {\n      if (imageRef && model) {\n        console.log(\n          \"Uploaded Image from inside the useEffect\",\n          findState.uploadedImage\n        )\n        console.log(\"ImageRef from inside the useEffect\", imageRef.current)\n        try {\n          const imgTensor = tf.browser\n            .fromPixels(imageRef.current)\n            .resizeNearestNeighbor([160, 160])\n            .toFloat()\n            .sub(127)\n            .div(127)\n            .expandDims()\n\n          const y_pred = await model.predict(imgTensor).data()\n          console.log(y_pred)\n          console.log(pokemonState)\n\n          const topkPredNames = getTopKPredPokeObj(y_pred, 6, pokemonState)\n\n          dispatch(storePredictions({ predictions: topkPredNames }))\n\n          console.log(topkPredNames)\n\n          return topkPredNames\n        } catch (e) {\n          console.log(\"Unable to run predictions.\", e)\n        }\n      }\n    }\n    makePredictions()\n  }, [findState.uploadedImage])\n\n  return (\n    <div tw=\"flex flex-col text-center p-2 md:flex-row \">\n      <div tw=\"md:w-1/2 m-1\">\n        <h3 tw=\"bg-gray-400 mb-2 text-gray-900 font-semibold p-1 rounded\">\n          Preview Input Image\n        </h3>\n        <div tw=\"flex flex-row justify-between p-1\">\n          <div></div>\n          {console.log(\n            \"Uploaded Image from inside the useEffect\",\n            findState.uploadedImage\n          )}\n          {console.log(\"ImageRef from inside the useEffect\", imageRef.current)}\n          {findState.uploadedImage && (\n            <img\n              ref={imageRef}\n              tw=\"border border-purple-700 p-1 rounded shadow-lg\"\n              src={findState.uploadedImage}\n              width={600}\n              height={600}\n            />\n          )}\n          <div></div>\n        </div>\n      </div>\n      <div tw=\"md:w-1/2 md:h-screen m-1 text-black\">\n        <h3 tw=\"bg-gray-400 mb-2 text-gray-900 font-semibold p-1 rounded\">\n          Search Results (top-6 matches)\n        </h3>\n        <div tw=\"grid grid-cols-1 sm:grid-cols-1 lg:grid-cols-2 gap-2 p-1\">\n          {findState.matchesFound.length === 6 &&\n            findState.matchesFound.map(poke => (\n              <PokemonCardML\n                key={`key-${poke.id}`}\n                pokemonId={poke.id}\n                pokemonName={poke.name}\n                pokemonType={poke.type}\n                pokemonHeight={poke.height}\n                pokemonWeight={poke.weight}\n                pokemonBaseExperience={poke.baseExperience}\n                pokemonSprite={poke.sprites}\n              />\n            ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SearchOutput\n"]},"metadata":{},"sourceType":"module"}