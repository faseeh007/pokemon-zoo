{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\"; // A constant that determines how many pokemon are fetched from the API.\n\nexport const NUMBER_OF_POKEMON = 150; // URL for the get request.\n\nconst URL = `https://pokeapi.co/api/v2/pokemon?limit=${NUMBER_OF_POKEMON}`; // We initialize 2 arrays. pokemonList is where we store all the pokemon fetched.\n// filteredPokemonList is where we store pokemon that match the search filter.\n\nconst initialState = {\n  pokemonList: [],\n  filteredPokemonList: []\n}; // A function that checks if a pokemon exists in an array.\n\nconst pokemonExists = (arr, val) => {\n  return arr.some(arrVal => val === arrVal);\n};\n\nexport const pokemonCardsSlice = createSlice({\n  name: \"pokemonCards\",\n  initialState: initialState,\n  reducers: {\n    // Add a pokemon to the array. Pokemon is added only if it\n    // does not already exist in the state.\n    add: (state, action) => {\n      const existingPokeIds = state.pokemonList.map(poke => poke.id);\n\n      if (!pokemonExists(existingPokeIds, action.payload.id)) {\n        state.pokemonList.push(action.payload);\n      }\n    },\n    // Search for a pokemon in the pokemonList state. The matches are stored in the\n    // filteredPokemonList state.\n    search: (state, action) => {\n      const searchTerm = action.payload.searchTerm; // If the search term is empty, then pokemonList is\n      // returned.\n\n      if (searchTerm === \"\") {\n        state.filteredPokemonList = state.pokemonList;\n      } // Convert the searchTerm and existing pokemon to lowercase while searhcing.\n\n\n      const filteredList = state.pokemonList.filter(poke => poke.name.toLowerCase().includes(searchTerm.toLowerCase())); // if searchTerm is not empty and no match is found, return \"xxx\".\n      // Else return the filtered list.\n\n      if (searchTerm !== \"\" && filteredList.length === 0) {\n        state.filteredPokemonList = [\"xxx\"];\n      } else {\n        state.filteredPokemonList = filteredList;\n      }\n    }\n  }\n});\nexport const {\n  add,\n  search\n} = pokemonCardsSlice.actions; // Async function to fetch pokemon.\n// We only fetch pokemon if they already don't exist in the state.\n// We do this so that a request is not made everytime we go to the explore page.\n\nexport const fetchPokemonNameUrl = () => {\n  return async (dispatch, getState) => {\n    // get state\n    const state = getState();\n\n    try {\n      // if length of pokemonList is not equal to NUMBER_OF_POKEMON, then fetch\n      // pokemon.\n      if (state.pokemon.pokemonList.length !== NUMBER_OF_POKEMON) {\n        const response = await axios.get(URL);\n        const data = response.data.results; // create a temp object for every pokemon fetched, extract all relevant\n        // details into it, and push it into the pokemonList state.\n\n        data.map(async poke => {\n          const responseDetails = await axios.get(poke.url);\n          let tempDetails = {\n            id: responseDetails.data.id,\n            name: responseDetails.data.species.name,\n            baseExperience: responseDetails.data.base_experience,\n            height: responseDetails.data.height,\n            weight: responseDetails.data.weight,\n            type: responseDetails.data.types[0].type.name,\n            sprites: responseDetails.data.sprites.front_default\n          };\n          dispatch(add(tempDetails));\n        });\n      }\n    } catch (e) {\n      console.log(\"Could not fetch data.\");\n    }\n  };\n};\nexport const selectorPokemon = state => state.pokemon.pokemonList;\nexport const selectorFilteredPokemon = state => state.pokemon.filteredPokemonList;\nexport default pokemonCardsSlice.reducer;","map":{"version":3,"sources":["/home/faseeh/faseehWorkspace/Pokemon/pokezoo/frontend/src/features/explore/pokemonCardsSlice.js"],"names":["createSlice","axios","NUMBER_OF_POKEMON","URL","initialState","pokemonList","filteredPokemonList","pokemonExists","arr","val","some","arrVal","pokemonCardsSlice","name","reducers","add","state","action","existingPokeIds","map","poke","id","payload","push","search","searchTerm","filteredList","filter","toLowerCase","includes","length","actions","fetchPokemonNameUrl","dispatch","getState","pokemon","response","get","data","results","responseDetails","url","tempDetails","species","baseExperience","base_experience","height","weight","type","types","sprites","front_default","e","console","log","selectorPokemon","selectorFilteredPokemon","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport axios from \"axios\"\n\n// A constant that determines how many pokemon are fetched from the API.\nexport const NUMBER_OF_POKEMON = 150\n\n// URL for the get request.\nconst URL = `https://pokeapi.co/api/v2/pokemon?limit=${NUMBER_OF_POKEMON}`\n\n// We initialize 2 arrays. pokemonList is where we store all the pokemon fetched.\n// filteredPokemonList is where we store pokemon that match the search filter.\nconst initialState = {\n  pokemonList: [],\n  filteredPokemonList: [],\n}\n\n// A function that checks if a pokemon exists in an array.\nconst pokemonExists = (arr, val) => {\n  return arr.some(arrVal => val === arrVal)\n}\n\nexport const pokemonCardsSlice = createSlice({\n  name: \"pokemonCards\",\n  initialState: initialState,\n  reducers: {\n    // Add a pokemon to the array. Pokemon is added only if it\n    // does not already exist in the state.\n    add: (state, action) => {\n      const existingPokeIds = state.pokemonList.map(poke => poke.id)\n      if (!pokemonExists(existingPokeIds, action.payload.id)) {\n        state.pokemonList.push(action.payload)\n      }\n    },\n    // Search for a pokemon in the pokemonList state. The matches are stored in the\n    // filteredPokemonList state.\n    search: (state, action) => {\n      const searchTerm = action.payload.searchTerm\n\n      // If the search term is empty, then pokemonList is\n      // returned.\n      if (searchTerm === \"\") {\n        state.filteredPokemonList = state.pokemonList\n      }\n\n      // Convert the searchTerm and existing pokemon to lowercase while searhcing.\n      const filteredList = state.pokemonList.filter(poke =>\n        poke.name.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n\n      // if searchTerm is not empty and no match is found, return \"xxx\".\n      // Else return the filtered list.\n      if (searchTerm !== \"\" && filteredList.length === 0) {\n        state.filteredPokemonList = [\"xxx\"]\n      } else {\n        state.filteredPokemonList = filteredList\n      }\n    },\n  },\n})\n\nexport const { add, search } = pokemonCardsSlice.actions\n\n// Async function to fetch pokemon.\n// We only fetch pokemon if they already don't exist in the state.\n// We do this so that a request is not made everytime we go to the explore page.\nexport const fetchPokemonNameUrl = () => {\n  return async (dispatch, getState) => {\n    // get state\n    const state = getState()\n\n    try {\n      // if length of pokemonList is not equal to NUMBER_OF_POKEMON, then fetch\n      // pokemon.\n      if (state.pokemon.pokemonList.length !== NUMBER_OF_POKEMON) {\n        const response = await axios.get(URL)\n        const data = response.data.results\n\n        // create a temp object for every pokemon fetched, extract all relevant\n        // details into it, and push it into the pokemonList state.\n        data.map(async poke => {\n          const responseDetails = await axios.get(poke.url)\n\n          let tempDetails = {\n            id: responseDetails.data.id,\n            name: responseDetails.data.species.name,\n            baseExperience: responseDetails.data.base_experience,\n            height: responseDetails.data.height,\n            weight: responseDetails.data.weight,\n            type: responseDetails.data.types[0].type.name,\n            sprites: responseDetails.data.sprites.front_default,\n          }\n\n          dispatch(add(tempDetails))\n        })\n      }\n    } catch (e) {\n      console.log(\"Could not fetch data.\")\n    }\n  }\n}\n\nexport const selectorPokemon = state => state.pokemon.pokemonList\nexport const selectorFilteredPokemon = state =>\n  state.pokemon.filteredPokemonList\n\nexport default pokemonCardsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}