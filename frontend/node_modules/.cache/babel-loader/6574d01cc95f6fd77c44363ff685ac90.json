{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nconst initialState = {\n  uploadedImage: \"\",\n  matchesFound: []\n};\nexport const findSlice = createSlice({\n  name: \"find\",\n  initialState: initialState,\n  reducers: {\n    storeInputImage: (state, action) => {\n      state.uploadedImage = action.payload.uploadedImage;\n    },\n    storePredictions: (state, action) => {\n      state.matchesFound = action.payload.predictions;\n    }\n  }\n});\nexport const selectorFind = state => state.find;\nexport const {\n  storeInputImage,\n  storePredictions\n} = findSlice.actions;\nexport default findSlice.reducer;","map":{"version":3,"sources":["/home/faseeh/faseehWorkspace/Pokemon/pokezoo/frontend/src/features/find/findSlice.js"],"names":["createSlice","axios","initialState","uploadedImage","matchesFound","findSlice","name","reducers","storeInputImage","state","action","payload","storePredictions","predictions","selectorFind","find","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,EADI;AAEnBC,EAAAA,YAAY,EAAE;AAFK,CAArB;AAKA,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;AACnCM,EAAAA,IAAI,EAAE,MAD6B;AAEnCJ,EAAAA,YAAY,EAAEA,YAFqB;AAGnCK,EAAAA,QAAQ,EAAE;AACRC,IAAAA,eAAe,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAClCD,MAAAA,KAAK,CAACN,aAAN,GAAsBO,MAAM,CAACC,OAAP,CAAeR,aAArC;AACD,KAHO;AAIRS,IAAAA,gBAAgB,EAAE,CAACH,KAAD,EAAQC,MAAR,KAAmB;AACnCD,MAAAA,KAAK,CAACL,YAAN,GAAqBM,MAAM,CAACC,OAAP,CAAeE,WAApC;AACD;AANO;AAHyB,CAAD,CAA7B;AAaP,OAAO,MAAMC,YAAY,GAAGL,KAAK,IAAIA,KAAK,CAACM,IAApC;AACP,OAAO,MAAM;AAAEP,EAAAA,eAAF;AAAmBI,EAAAA;AAAnB,IAAwCP,SAAS,CAACW,OAAxD;AACP,eAAeX,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\nimport axios from \"axios\"\n\nconst initialState = {\n  uploadedImage: \"\",\n  matchesFound: [],\n}\n\nexport const findSlice = createSlice({\n  name: \"find\",\n  initialState: initialState,\n  reducers: {\n    storeInputImage: (state, action) => {\n      state.uploadedImage = action.payload.uploadedImage\n    },\n    storePredictions: (state, action) => {\n      state.matchesFound = action.payload.predictions\n    },\n  },\n})\n\nexport const selectorFind = state => state.find\nexport const { storeInputImage, storePredictions } = findSlice.actions\nexport default findSlice.reducer\n"]},"metadata":{},"sourceType":"module"}